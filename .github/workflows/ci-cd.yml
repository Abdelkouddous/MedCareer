name: MedCareer CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || true

      - name: Run unit tests
        run: npm run test:ci
        env:
          NODE_ENV: test
          MONGO_URL: mongodb://localhost:27017/medcareer-test
          JWT_SECRET: test-jwt-secret
          JWT_LIFETIME: 30d

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          MONGO_URL: mongodb://localhost:27017/medcareer-test
          JWT_SECRET: test-jwt-secret
          JWT_LIFETIME: 30d

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install root dependencies
        run: npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Run frontend linting
        run: cd client && npm run lint

      - name: Build frontend
        run: cd client && npm run build

      - name: Run frontend tests
        run: cd client && npm test -- --coverage --watchAll=false
        env:
          CI: true

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: |
          npm run setup-production-app

      - name: Start application
        run: |
          npm start &
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          MONGO_URL: mongodb://localhost:27017/medcareer-e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: npx audit-ci --config audit-ci.json || true

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Artillery
        run: npm install -g artillery

      - name: Run performance tests
        run: artillery run tests/performance/load-test.yml
        env:
          NODE_ENV: test
          MONGO_URL: mongodb://localhost:27017/medcareer-perf

  # Build and Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run setup-production-app

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # Example: rsync, docker build, etc.

      - name: Notify deployment
        run: |
          echo "Deployment completed successfully!"

